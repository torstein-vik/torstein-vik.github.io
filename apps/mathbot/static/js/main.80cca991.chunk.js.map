{"version":3,"sources":["CAS.js","Logic.js","App.js","reportWebVitals.js","index.js"],"names":["rewrites","data","x","applyRewrite","expr","rewrite","vars","extractVar","match","error","a","res","nexpr","Object","assign","b","to","pattern","type","adata","bdata","CAS","toString","allRewrites","filter","say","ask","proofOrTopic","fetch","response","json","doProof","doTopics","doSimplifications","topicNames","map","d","name","choice","topic","doTopic","subtopicNames","subtopics","subtopic","doSubtopic","doQuiz","quiz","quizResultObj","resultFirstQuiz","correct","quizMax","length","resultRatio","resultPercent","Math","round","explWrong","running","explanationsUnsorted","explanations","e","n","occurances","priority","sort","whatToDo","explNames","expl","text","understand","qNames","questions","q","resultSecondQuizObj","resultSecondQuiz","resultRatioSecond","resultPercentSecond","total","question","choices","push","proof","state","history","states","have","v","know","h","goal","directionNames","directions","allDirections","concat","backIndex","restartIndex","action","pop","bstate","dir1","handleDir","dir","goto","dir2","simplificationNames","simplification","doSimplification","simpl","posRewrites","posRewritesNames","rwChosen","rw","handleChat","Chatarea","props","chat","writing","resolveChoice","msg","newChat","sentByBot","setState","Promise","r","setTimeout","i","this","scrollToBottom","messagesEnd","scrollIntoView","behavior","value","sender","onClick","id","style","float","clear","ref","el","React","Component","Message","className","Choice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80cca991.chunk.js","sourcesContent":["\n\nfunction toString(expr) {\n    if (typeof(expr) === \"number\") {\n        return expr;\n    } else if (typeof(expr) === \"string\") {\n        return expr;\n    } else if (typeof(expr) === \"object\") {\n        const type = expr.type;\n\n        if (type === \"add\") {\n            const as = toString(expr.a);\n            const bs = toString(expr.b);\n            return \"(\" + as + \") + (\" + bs + \")\";\n        } else if (type === \"sub\") {\n            const as = toString(expr.a);\n            const bs = toString(expr.b);\n            return \"(\" + as + \") - (\" + bs + \")\";\n        } else if (type === \"mul\") {\n            const as = toString(expr.a);\n            const bs = toString(expr.b);\n            return \"(\" + as + \") * (\" + bs + \")\";\n        } else if (type === \"div\") {\n            const as = toString(expr.a);\n            const bs = toString(expr.b);\n            return \"(\" + as + \") / (\" + bs + \")\";\n        } else if (type === \"pow\") {\n            const as = toString(expr.a);\n            const bs = toString(expr.b);\n            return \"(\" + as + \") ^ (\" + bs + \")\";\n        } else if (type === \"cos\") {\n            const as = toString(expr.a);\n            return \"cos(\" + as + \")\";\n        } else if (type === \"sin\") {\n            const as = toString(expr.a);\n            return \"sin(\" + as + \")\";\n        }\n    }\n}\n\nconst rewrites = [\n    {\n        \"name\": \"Double inverse is identity\",\n        \"match\": {\n            \"type\": \"div\",\n            \"a\": 1,\n            \"b\": {\n                \"type\": \"div\",\n                \"a\": 1,\n                \"b\": \"x\",\n            }\n        },\n        \"to\": (data) => {\n            const x = data.x;\n            return x;\n        }\n    },\n    {\n        \"name\": \"Sum of squares of sin and cos is 1\",\n        \"match\": {\n            \"type\": \"add\",\n            \"a\": {\n                \"type\": \"pow\",\n                \"a\": {\n                    \"type\": \"cos\",\n                    \"a\": \"x\"\n                },\n                \"b\": 2\n            },\n            \"b\": {\n                \"type\": \"pow\",\n                \"a\": {\n                    \"type\": \"sin\",\n                    \"a\": \"x\"\n                },\n                \"b\": 2\n            }\n        },\n        \"to\": (data) => 1\n    }\n];\n\n\nfunction allRewrites (expr) {\n    return rewrites.filter((rewrite) => {\n        const res = applyRewrite(expr, rewrite);\n        return !res.error;\n    });\n}\n\nfunction applyRewrite (expr, rewrite) {\n    const vars = extractVar(expr, rewrite.match);\n    if (vars.error) {\n        \n        if (typeof(expr) === \"object\") {\n            \n            if (typeof(expr.a) !== \"undefined\") {\n                const res = applyRewrite(expr.a, rewrite);\n\n                if (!res.error) {\n                    const nexpr = Object.assign({}, expr);\n\n                    nexpr.a = res.data;\n\n                    return {\n                        error: false,\n                        data: nexpr\n                    }\n                }\n            }\n\n            if (typeof(expr.b) !== \"undefined\") {\n                const res = applyRewrite(expr.b, rewrite);\n\n                if (!res.error) {\n                    const nexpr = Object.assign({}, expr);\n\n                    nexpr.b = res.data;\n\n                    return {\n                        error: false,\n                        data: nexpr\n                    }\n                }\n            }\n        }\n\n        return {\n            error: true\n        }\n\n    } else {\n        const nexpr = rewrite.to(vars.data);\n        return {\n            error: false,\n            data: nexpr\n        }\n    }\n}\n\nfunction extractVar (expr, pattern) {\n    if (typeof(pattern) === \"number\") {\n        if (expr === pattern) {\n            return {\n                error: false,\n                data: {}\n            }\n        } else {\n            return {\n                error: true\n            }\n        }\n    } else if (typeof(pattern) === \"string\") {\n        return {\n            error: false,\n            data: {\n                [pattern]: expr\n            }\n        }\n    } else if (typeof(pattern) === \"object\") {\n        if (typeof(pattern) !== \"object\") {\n            return {\n                error: true\n            }\n        } else {\n            if (pattern.type === expr.type) {\n                let adata = {};\n                let bdata = {};\n\n                if (typeof(pattern.a) !== \"undefined\") {\n                    adata = extractVar(expr.a, pattern.a);\n                }\n\n                if (typeof(pattern.b) !== \"undefined\") {\n                    bdata = extractVar(expr.b, pattern.b);\n                }\n\n                const common = {\n                    error: adata.error || bdata.error,\n                    data: {\n                        ...adata.data,\n                        ...bdata.data\n                    }\n                }\n\n                return common;\n            } else {\n                return {\n                    error: true\n                }\n            }\n        }\n    }\n}\n\n\n\nconst CAS = {\n    toString: toString,\n    applyRewrite: applyRewrite,\n    allRewrites: allRewrites\n};\n\n\nexport default CAS;\n","\nimport CAS from \"./CAS.js\";\n\nasync function handleChat(say, ask) {\n    await say(\"Hello!\");\n    await say(\"Do you want to do a proof or do you want to learn about a new topic?\");\n    await say(\"Or do you want to simplify something?\");\n    const proofOrTopic = await ask([\"Proof\", \"Topic\", \"Simplify\", \"Not right now\"]);\n    if (proofOrTopic === 0) {\n\n        const response = await fetch(\"/proof.json\"); // TODO: Ensure path is right\n\n        const json = await response.json();\n\n        await doProof(say, ask, json[0]);\n\n    } else if (proofOrTopic === 1) {\n        \n        const response = await fetch(\"/content.json\"); // TODO: Ensure path is right\n\n        const json = await response.json();\n\n        await doTopics(say, ask, json);\n\n    } else if (proofOrTopic === 2) {\n        \n        const response = await fetch(\"/simplify.json\"); // TODO: Ensure path is right\n\n        const json = await response.json();\n\n        await doSimplifications(say, ask, json);\n\n    } else {\n        await say(\"No worries, talk later.\");\n    }\n}\n\nasync function doTopics(say, ask, json) {\n    await say(\"Great, which topic would you like to learn about?\");\n\n    const topicNames = json.map((d) => d.name);\n\n    const choice = await ask(topicNames);\n\n    const topic = json[choice];\n\n    await doTopic(say, ask, topic);\n}\n\nasync function doTopic(say, ask, topic) {\n    await say(\"Great choice!\");\n    await say(\"Which subtopic?\");\n\n    const subtopicNames = topic.subtopics.map((d) => d.name);\n\n    const choice = await ask(subtopicNames);\n\n    const subtopic = topic.subtopics[choice];\n\n    await doSubtopic(say, ask, subtopic);\n\n}\n\nasync function doSubtopic(say, ask, subtopic) {\n\n    await say(\"First we do a quiz to assess your prior knowledge\");\n    await say(\"Ready?\");\n\n    await ask([\"Yes, ready!\"]);\n\n    const quizResultObj = await doQuiz(say, ask, subtopic.quiz);\n    const resultFirstQuiz = quizResultObj.correct;\n    const quizMax = subtopic.quiz.length;\n\n    const resultRatio = resultFirstQuiz / quizMax;\n\n    const resultPercent = Math.round(resultRatio * 100);\n\n    let explWrong = quizResultObj.explWrong;\n\n    await say(\"Great work on the quiz!\");\n    await say(\"You got \" + resultFirstQuiz + \" out of \" + quizMax + \" or \" + resultPercent + \"% correct\");\n    \n    if (resultPercent <= 50) {\n        await say(\"I recommend you work on this subject\");\n    } else if (resultPercent <= 75) {\n        await say(\"You did well on this quiz but you can always fill your knowledge holes\");\n    } else if (resultPercent <= 90) {\n        await say(\"You did very well, but feel free to study this subject anyway\");\n    } else {\n        await say(\"You did great, and your time is probably better spent on something more challenging\");\n    }\n    \n    await say(\"So do you want to work or skip?\");\n\n    const workOrSkip = await ask([\"Work\", \"Skip\"]);\n\n    if (workOrSkip !== 0) {\n        await say(\"That's ok, I will mark it as complete\");\n        return;\n    } \n\n    let running = true;\n\n    while (running) {\n\n        const explanationsUnsorted = subtopic.explanations.map((e, n) => {\n            const occurances = explWrong.filter(x => x === n).length\n            return {\n                ...e,\n                priority: occurances\n            }\n        });\n\n        const explanations = explanationsUnsorted.sort((a, b) => b.priority - a.priority);\n\n        await say(\"We have three things we can do: explanations, questions, and finishing up and retaking the quiz.\");\n        await say(\"I have sorted the explanations based on what you got wrong in the quiz.\");\n        await say(\"I recommend doing a few explanations first, then questions if you have any, and retaking the quiz when you feel ready.\");\n        await say(\"Feel free to learn from other resources as well.\");\n\n        const whatToDo = await ask([\"Explanation\", \"Question\", \"Retake Quiz\"]);\n\n        if (whatToDo === 0) {\n\n            await say(\"Which explanation would you like?\");\n\n            const explNames = explanations.map((d) => d.name);\n\n            const choice = await ask(explNames);\n\n            const expl = explanations[choice];\n\n            await say(expl.text);\n\n            const understand = await ask([\"I understand!\", \"I don't understand...\"]);\n\n            if (understand === 0) {\n                await say(\"Great!\");\n            } else if (understand === 1) {\n                await say(\"I'm sorry you didn't understand. I'll report this to my creators.\");\n            }\n\n\n        } else if (whatToDo === 1) {\n\n            await say(\"Which question would you like to ask?\");\n\n            const qNames = subtopic.questions.map((d) => d.q);\n\n            const choice = await ask(qNames);\n\n            const q = subtopic.questions[choice];\n\n            await say(q.a);\n\n            const understand = await ask([\"I understand!\", \"I don't understand...\"]);\n\n            if (understand === 0) {\n                await say(\"Great!\");\n            } else if (understand === 1) {\n                await say(\"I'm sorry you didn't understand. I'll report this to my creators.\");\n            }\n\n        } else if (whatToDo === 2) {\n\n            await say(\"It's great that you feel ready. I will start the quiz.\");\n\n            const resultSecondQuizObj = await doQuiz(say, ask, subtopic.quiz);\n            const resultSecondQuiz = resultSecondQuizObj.correct;\n            //const quizMax = subtopic.quiz.length;\n        \n            const resultRatioSecond = resultSecondQuiz / quizMax;\n        \n            const resultPercentSecond = Math.round(resultRatioSecond * 100);\n        \n            explWrong = resultSecondQuizObj.explWrong;\n\n            await say(\"Great work on the quiz!\");\n            await say(\"You got \" + resultSecondQuiz + \" out of \" + quizMax + \" or \" + resultPercentSecond + \"% correct\");\n            \n            if (resultPercentSecond > resultPercent) {\n                await say(\"You did better this time compared to last time!\");\n            }\n\n            if (resultPercentSecond <= 50) {\n                await say(\"I recommend you work even more on this subject\");\n            } else if (resultPercentSecond <= 75) {\n                await say(\"You did well on this quiz but you can always fill your knowledge holes\");\n            } else if (resultPercentSecond <= 90) {\n                await say(\"You did very well, but feel free to study this subject more anyway\");\n            } else {\n                await say(\"You did great, and your time is probably better spent on something more challenging\");\n            }\n\n\n            await say(\"So do you want to work even more or are you done?\");\n\n            const workOrSkip = await ask([\"Work\", \"Done\"]);\n\n            if (workOrSkip !== 0) {\n                await say(\"That's ok, I will mark it as complete\");\n                running = false;\n\n                return;\n            } \n        }\n\n    }\n\n}\n\nasync function doQuiz(say, ask, quiz) {\n    let total = 0;\n    let explWrong = [];\n\n    await say(\"Ok, first question:\");\n    for (const q of quiz) {\n        await say(q.question);\n        const choice = await ask(q.choices);\n        if (choice === q.correct) {\n            total += 1;\n        } else {\n            explWrong.push(...q.explanations);\n        }\n        await say(\"Thank you for the answer\");\n    }\n\n    await say(\"That was all the questions!\");\n\n    return {\n        correct: total,\n        explWrong: explWrong\n    };\n}\n\n\nasync function doProof(say, ask, proof) {\n    await say(\"Great, today we will prove '\" + proof.name + \"'. \");\n\n    let state = \"init\";\n    let history = [];\n\n    let running = true;\n\n    while (running) {\n        const data = proof.states[state];\n        history.push(state);\n\n        await say(\"Here is the status of the proof:\");\n\n        if (data.have.length !== 0) {\n            await say(\"Here is what we have:\");\n        \n            for (const v of data.have) {\n                await say(\"• \" + v);\n            }\n        }\n\n        if (data.know.length !== 0) {\n            await say(\"Here is what we know:\");\n        \n            for (const h of data.know) {\n                await say(\"• \" + h);\n            }\n    \n        }\n\n        if (data.goal.length === 1) {\n            await say(\"There is only one thing to prove:\");\n            await say(\"→ \" + data.goal[0]);\n        } else {\n            await say(\"There are multiple things to prove, but for now only worry about this:\");\n            await say(\"→ \" + data.goal[0]);\n        }\n\n        await say(\"What do you want to do?\");\n\n        const directionNames = data.directions.map((d) => d.name);\n\n        // Add \"back\" and \"restart\" if history is empty\n        const allDirections = directionNames.concat(history.length <= 1 ? [] : [\"Back\", \"Restart\"]);\n\n        const backIndex = directionNames.length;\n        const restartIndex = backIndex + 1;\n\n        const action = await ask(allDirections);\n\n        if (action === backIndex) {\n            // First remove current state\n            history.pop();\n            // Then remove the one we're moving back to, as it will be readded. Store state and move to it\n            const bstate = history.pop();\n            state = bstate;\n        } else if (action === restartIndex) {\n            state = \"init\";\n        } else {\n            const dir1 = data.directions[action];\n\n            const handleDir = async (dir) => {\n                if (dir.goto) {\n                    if (dir.goto === \"done\") {\n                        await say(\"Great work! You finished the proof!\");\n                        running = false;\n                    } else {\n                        await say(\"Great!\");\n                        state = dir.goto;\n                    }\n                } else if (dir.error) {\n                    await say(dir.error);\n                    await say(\"Try again\");\n                } else if (dir.directions) {\n                    await say(\"Which of these?\");\n        \n                    const action = await ask(dir.directions.map((d) => d.name));\n        \n                    const dir2 = dir.directions[action];\n        \n                    await handleDir(dir2);\n                }\n            }\n    \n            await handleDir(dir1);\n        }\n\n    }\n\n}\n\n\nasync function doSimplifications(say, ask, json) {\n    await say(\"Great, which simplification would you like to do?\");\n\n    const simplificationNames = json.map((d) => d.name);\n\n    const choice = await ask(simplificationNames);\n\n    const simplification = json[choice];\n\n    await doSimplification(say, ask, simplification);\n}\n\n\nasync function doSimplification(say, ask, simpl) {\n\n    let expr = simpl.expr;\n\n    let running = true;\n\n    while (running) {\n\n        if (expr === simpl.goal) {\n            await say(\"You have reached the goal! Congratulations!\");\n            running = false;\n            break;\n        }\n\n        await say(\"We have the following expression:\");\n        await say(CAS.toString(expr));\n\n        await say(\"I will compile all the rewritings you can use.\");\n        \n        const posRewrites = CAS.allRewrites(expr);\n\n        const posRewritesNames = posRewrites.map((d) => d.name);\n\n        if (posRewrites.length === 0) {\n            await say(\"I did not find any rewrites!\")\n        } else {\n\n            await say(\"Here are the ones you can use:\");\n\n            const rwChosen = await ask(posRewritesNames);\n    \n            const rw = posRewrites[rwChosen];\n    \n            const res = CAS.applyRewrite(expr, rw);\n    \n            if (!res.error) {\n                expr = res.data;\n            } else {\n                await say(\"Could not apply that one.\");\n            }\n        }\n\n    }\n\n}\n\n\nexport default handleChat;\n","import React from 'react';\nimport './App.css';\nimport handleChat from './Logic.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chatarea />\n    </div>\n  );\n}\n\nclass Chatarea extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chat: [],\n      writing: false,\n      choices: [],\n      resolveChoice: () => {},\n    };\n\n    const say = async (msg) => {\n\n      const newChat = this.state.chat.concat({\n        msg: msg,\n        sentByBot: true\n      });\n\n      this.setState({writing: true});\n      await new Promise(r => setTimeout(r, 500));\n      \n      //this.setState({writing: false});\n      //await new Promise(r => setTimeout(r, 200));\n      \n      //this.setState({chat: newChat});\n      this.setState({\n        writing: false,\n        chat: newChat\n      })\n    }\n\n    const ask = async (choices) => {\n      const i = await new Promise(r => {\n        this.setState({\n          choices: choices,\n          resolveChoice: (i) => {\n            r(i);\n          }\n        });\n      });\n\n      const newChat = this.state.chat.concat({\n        msg: this.state.choices[i],\n        sentByBot: false\n      });\n\n      this.setState({\n        choices: [],\n        resolveChoice: () => {},\n        chat: newChat\n      });\n      \n      return i;\n    }\n\n    handleChat(say, ask);\n\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom() {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    //this.messagesEnd.scrollIntoView();\n  }\n\n  render() {\n    const chat = this.state.chat.map((data, i) => \n      <Message key={i} value={data.msg} sender={data.sentByBot ? \"bot\" : \"user\"} />\n    );\n\n    const writing = this.state.writing ? <Message value=\"...\" sender=\"bot\" /> : null;\n\n    const choices = this.state.choices.map((data, i) => \n      <Choice key={i} value={data} onClick={() => this.state.resolveChoice(i)}/>\n    );\n\n    return (\n      <div id=\"chatarea\">\n        {chat}\n        {writing}\n        {choices}\n        <div style={{ float:\"left\", clear: \"both\" }}\n             ref={(el) => { this.messagesEnd = el; }}> </div>\n      </div>\n    );\n  }\n\n}\n\nclass Message extends React.Component {\n\n  render() {\n    return (\n      <div className={\"Message \"+this.props.sender}> <div className=\"MessageContainer\">{this.props.value} </div></div>\n    );\n  }\n\n}\n\n\nclass Choice extends React.Component {\n\n  render() {\n    return (\n      <input type=\"button\" className=\"choice\" value={this.props.value} onClick={this.props.onClick}/>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}